!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ALPHABET_SIZE	rnd.c	9;"	d	file:
DIRECTION_E	dir.h	/^	DIRECTION_E,$/;"	e	enum:direction
DIRECTION_N	dir.h	/^	DIRECTION_N,$/;"	e	enum:direction
DIRECTION_NE	dir.h	/^	DIRECTION_NE,$/;"	e	enum:direction
DIRECTION_NW	dir.h	/^	DIRECTION_NW$/;"	e	enum:direction
DIRECTION_S	dir.h	/^	DIRECTION_S,$/;"	e	enum:direction
DIRECTION_SE	dir.h	/^	DIRECTION_SE,$/;"	e	enum:direction
DIRECTION_SW	dir.h	/^	DIRECTION_SW,$/;"	e	enum:direction
DIRECTION_W	dir.h	/^	DIRECTION_W,$/;"	e	enum:direction
EXIT_WORDTOOLONG	grid.c	/^	EXIT_WORDTOOLONG,$/;"	e	enum:exitcodes	file:
NUM_DIRECTIONS	dir.h	15;"	d
RND_MAXINT	rnd.c	10;"	d	file:
WORDSEARCH_DIR	dir.h	2;"	d
WORDSEARCH_GRID	grid.h	2;"	d
WORDSEARCH_MAXTRIES	grid.h	4;"	d
WORDSEARCH_RND	rnd.h	2;"	d
bounds	grid.h	/^typedef struct bounds {$/;"	s
bounds	grid.h	/^} bounds;$/;"	t	typeref:struct:bounds
c	rnd.c	/^	char c;$/;"	m	struct:letter_frequency	file:
direction	dir.h	/^enum direction {$/;"	g
directions	dir.c	/^int directions[] = {$/;"	v
exitcodes	grid.c	/^enum exitcodes {$/;"	g	file:
free_grid	grid.c	/^void free_grid(char** grid, int height) {$/;"	f
get_bounds	grid.c	/^bounds *get_bounds(int height, int width, enum direction direction, int length)$/;"	f
get_direction	dir.c	/^int get_direction(int simple)$/;"	f
get_random_letter	rnd.c	/^char get_random_letter()$/;"	f
init_grid	grid.c	/^char **init_grid(char** old, int height, int width)$/;"	f
letter_frequencies	rnd.c	/^} letter_frequencies[] = {$/;"	v	typeref:struct:letter_frequency
letter_frequency	rnd.c	/^struct letter_frequency {$/;"	s	file:
main	dir.c	/^int main()$/;"	f
main	grid.c	/^int main()$/;"	f
main	rnd.c	/^int main()$/;"	f
make_grid	grid.c	/^char **make_grid(char **words, int height, int width, int simple, int count)$/;"	f
max_x	grid.h	/^	int max_x;$/;"	m	struct:bounds
max_y	grid.h	/^	int max_y;$/;"	m	struct:bounds
min_x	grid.h	/^	int min_x;$/;"	m	struct:bounds
min_y	grid.h	/^	int min_y;$/;"	m	struct:bounds
move_x	grid.c	/^int move_x(int x, enum direction d) {$/;"	f
move_y	grid.c	/^int move_y(int y, enum direction d) {$/;"	f
p	rnd.c	/^	int p;			\/* pegged to 10000 rather than 1 *\/$/;"	m	struct:letter_frequency	file:
place_word	grid.c	/^int place_word(char *word, char **grid, int height, int width, int simple)$/;"	f
print_grid	grid.c	/^void print_grid(char** grid, int height) {$/;"	f
random_number	rnd.c	/^int random_number(int min_num, int max_num)$/;"	f
